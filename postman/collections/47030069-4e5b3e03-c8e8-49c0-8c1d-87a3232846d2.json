{
	"info": {
		"_postman_id": "47030069-4e5b3e03-c8e8-49c0-8c1d-87a3232846d2",
		"name": "MBbank Nạp tiền tự động",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "MBBank_Identify",
			"item": [
				{
					"name": "MBBank_Identify",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e8171ef1-86f9-43af-8a18-8fb035319a5f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96b0496d-3a20-4fd6-bb1e-7eeb62f79b1d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "47030069-c66cdb2c-eea9-4a06-8217-ece201e90a40",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"requestId\": \"{{requestId}}\",\r\n    \"signature\": \"{{signature}}\",\r\n    \"data\": {\r\n        \"referenceNumber\": \"{{referenceNumber}}\",\r\n        \"amount\": \"{{randomAmount}}\",\r\n        \"customerAcc\": \"MBIRIS001\",\r\n        \"transDate\": \"{{datetimenow}}\",\r\n        \"billNumber\": \"{{billNumber}}\",\r\n        \"userName\": \"thuthu\",\r\n        \"customerName\": \"Thu Thu\",\r\n        \"additionalData\": [\r\n            {\r\n                \"value\": \"Nap tien tai khoan hu de\",\r\n                \"name\": \"remark\"\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://192.168.1.9:44204/api/v1/order-update",
							"protocol": "http",
							"host": [
								"192",
								"168",
								"1",
								"9"
							],
							"port": "44204",
							"path": [
								"api",
								"v1",
								"order-update"
							]
						}
					},
					"response": []
				}
			],
			"id": "47030069-e89b0ecc-f87e-4d57-b069-864844eae363",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2d00c65a-a3be-4e03-962e-79ee5ff086b5",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// ====== Helper sinh random ======\r",
							"function generateRandomId(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"// ====== Helper: Generate GUID JS thuần ======\r",
							"function generateGuid() {\r",
							"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
							"        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
							"        return v.toString(16);\r",
							"    });\r",
							"}\r",
							"\r",
							"// ====== Helper: lấy từ CSV, nếu trống thì dùng default ======\r",
							"function getOrDefault(field, defaultVal) {\r",
							"    let csvValue = pm.iterationData.get(field);\r",
							"\r",
							"    if (csvValue !== undefined && csvValue !== null && csvValue.toString().trim() !== \"\") {\r",
							"        return csvValue.toString().trim();\r",
							"    }\r",
							"\r",
							"    let val = (typeof defaultVal === \"function\") ? defaultVal() : defaultVal;\r",
							"    return (val === undefined || val === null) ? \"\" : String(val);\r",
							"}\r",
							"\r",
							"// ====== Sinh dữ liệu động ======\r",
							"const requestId       = getOrDefault(\"requestId\", generateGuid);\r",
							"const referenceNumber = getOrDefault(\"referenceNumber\", generateGuid);\r",
							"const randomAmount    = getOrDefault(\"amount\", \"10000.00\");\r",
							"const customerAccount = getOrDefault(\"customerAccount\", \"MBIRIS001\");\r",
							"\r",
							"const currentDate = new Date();\r",
							"currentDate.setHours(currentDate.getHours() + 7);\r",
							"const datetimenow = getOrDefault(\"transDate\", () => currentDate.toISOString().slice(0, 19).replace('T', ' '));\r",
							"\r",
							"const billNumber   = getOrDefault(\"billNumber\", () => generateRandomId(10));\r",
							"const userName     = getOrDefault(\"userName\", \"thuthu\");\r",
							"const customerName = getOrDefault(\"customerName\", \"Thu Thu\");\r",
							"\r",
							"// ====== Set vào Local Variables (dùng được ngay trong body) ======\r",
							"pm.variables.set(\"requestId\", requestId);\r",
							"pm.variables.set(\"referenceNumber\", referenceNumber);\r",
							"pm.variables.set(\"randomAmount\", randomAmount);\r",
							"pm.variables.set(\"customerAccount\", customerAccount);\r",
							"pm.variables.set(\"datetimenow\", datetimenow);\r",
							"pm.variables.set(\"billNumber\", billNumber);\r",
							"pm.variables.set(\"userName\", userName);\r",
							"pm.variables.set(\"customerName\", customerName);\r",
							"\r",
							"console.log(\"requestId:\", requestId);\r",
							"console.log(\"referenceNumber:\", referenceNumber);\r",
							"\r",
							"// ====== Fake object để jsrsasign chạy ======\r",
							"var navigator = {};\r",
							"var window = {};\r",
							"var forge = {};\r",
							"\r",
							"// ====== Hàm ký số ======\r",
							"const createSignature = () => {\r",
							"    try {\r",
							"        // Load thư viện jsrsasign từ Globals hoặc Environment\r",
							"        const jsrsasign = pm.globals.get(\"jsrsasign\") || pm.environment.get(\"jsrsasign\");\r",
							"        if (!jsrsasign) {\r",
							"            throw new Error(\"jsrsasign library not found. Hãy thêm jsrsasign-all-min.js vào Globals/Env.\");\r",
							"        }\r",
							"        eval(jsrsasign);\r",
							"\r",
							"        // Build chuỗi data cần ký\r",
							"        const dataToSign = referenceNumber + customerAccount + randomAmount + datetimenow;\r",
							"        console.log(\"Data to sign:\", dataToSign);\r",
							"\r",
							"        // Private key (nên để trong Env variable: privateKeyPem)\r",
							"        const privateKeyPem = pm.environment.get(\"privateKeyPem\");\r",
							"        if (!privateKeyPem) {\r",
							"            throw new Error(\"Chưa cấu hình privateKeyPem trong Environment\");\r",
							"        }\r",
							"\r",
							"        // Ký số với SHA256withRSA\r",
							"        const rsa = new KJUR.crypto.Signature({ alg: \"SHA256withRSA\" });\r",
							"        const privateKey = KEYUTIL.getKey(privateKeyPem);\r",
							"        rsa.init(privateKey);\r",
							"        rsa.updateString(dataToSign);\r",
							"\r",
							"        const jwsSignatureValue = CryptoJS.enc.Base64.stringify(\r",
							"            CryptoJS.enc.Hex.parse(rsa.sign())\r",
							"        );\r",
							"\r",
							"        // Gán chữ ký vào local variable (body dùng được ngay)\r",
							"        pm.variables.set(\"signature\", jwsSignatureValue);\r",
							"        console.log(\"Signature:\", jwsSignatureValue);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Error creating signature:\", err.message);\r",
							"    }\r",
							"};\r",
							"\r",
							"// ====== Thực thi ký số ======\r",
							"createSignature();\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6f0a0e32-a955-414d-bf8d-4397f1f280ab",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// ==== Parse response ====\r",
							"let jsonData;\r",
							"try {\r",
							"    jsonData = pm.response.json();\r",
							"} catch (e) {\r",
							"    pm.test(\"Phản hồi phải là JSON hợp lệ\", function () {\r",
							"        pm.expect.fail(\"Không parse được JSON: \" + e.message);\r",
							"    });\r",
							"    return;\r",
							"}\r",
							"\r",
							"// ==== Check cấu trúc chuẩn ====\r",
							"pm.test('Response có đủ cấu trúc', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('requestId', 'data', 'signature');\r",
							"    pm.expect(jsonData.data).to.have.property(\"transactionId\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"responseCode\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"responseDesc\");\r",
							"});\r",
							"\r",
							"// ==== Expected từ CSV ====\r",
							"const expectedResponseCode = pm.iterationData.get(\"responseCode\");\r",
							"const expectedResponseDesc = pm.iterationData.get(\"responseDesc\");\r",
							"const testcaseName = pm.iterationData.get(\"Testcase Name\") || \"Unnamed Testcase\";\r",
							"\r",
							"// ==== HTTP status ====\r",
							"pm.test(\"HTTP status phải là 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ==== Check responseCode động ====\r",
							"if (expectedResponseCode) {\r",
							"    pm.test(\"responseCode phải khớp CSV (\" + testcaseName + \")\", function () {\r",
							"        pm.expect(jsonData.data.responseCode).to.eql(expectedResponseCode);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"responseCode mặc định = 00\", function () {\r",
							"        pm.expect(jsonData.data.responseCode).to.eql(\"00\");\r",
							"    });\r",
							"}\r",
							"\r",
							"// ==== Check responseDesc động ====\r",
							"if (expectedResponseDesc) {\r",
							"    pm.test(\"responseDesc phải khớp CSV (\" + testcaseName + \")\", function () {\r",
							"        pm.expect(jsonData.data.responseDesc).to.eql(expectedResponseDesc);\r",
							"    });\r",
							"}"
						]
					}
				}
			]
		}
	]
}